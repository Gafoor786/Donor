<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping>


	<sql-query name="ROLLUP_BALANCE">
	<![CDATA[
	select 
		  sum(amount) 
		from 
		  (
			    select 
			      sum(amount) amount 
			    from 
			      donation 
			    where 
			      date < :date 
		    
		    union 
		    
			    select 
			      sum(
			        case when transaction_type = 1 then amount when transaction_type = -1 then amount *-1 end
			      ) 'amount' 
			    from 
			      transaction 
			    where 
			      date < :date
		  ) a
			
	]]>

	</sql-query>
	<sql-query name="MONTLY_TRANSACTION_SUMMARY">
	<![CDATA[
		select 
			  * 
			from 
			  (
			    select 
			      date_format(date, '%Y-%m') date, 
			      campaign.id collectionTypeId, 
			      campaign.name collectionType, 
			      'donation' type, 
			      1 transactionType, 
			      sum(amount) amount 
			    from 
			      donation 
			      join campaign on donation.campaign_id = campaign.id 
			    where 
			      date >= :fromDate 
			      and date < :toDate 
			    group by 
			      date_format(date, '%Y-%m'), 
			      campaign.id 
			    union 
			    select 
			      date_format(date, '%Y-%m') date, 
			      config.id collectionTypeId, 
			      config.name collectionType, 
			      'transaction', 
			      transaction_type transactionType, 
			      amount 
			    from 
			      transaction 
			      join config on transaction.type_id = config.id 
			    where 
			      date >= :fromDate 
			      and date < :toDate 
			    group by 
			      date_format(date, '%Y-%m'), 
			      config.id
			  ) a 
			order by 
			  a.date
					
	]]>
	</sql-query>

	<!-- 1 - Credit -1 - Debit -->

	<sql-query name="DAILY_LEDGER_ENTRIES">
	<![CDATA[
	select 
		  * 
		from 
		  (
		    select 
		       DATE_FORMAT(date, '%Y-%m-%d') date, 
		      campaign.id collectionTypeId, 
		      campaign.name collectionType, 
		      'donation' type, 
		      1 transactionType, 
		      sum(amount) amount 
		    from 
		      donation 
		      join campaign on donation.campaign_id = campaign.id 
		    where 
		      date >= :fromDate
		      and date < :toDate 
		    group by 
		      DATE_FORMAT(date, '%Y-%m-%d'), 
		      campaign.id 
		      
		   union 
		    
		    select 
		       DATE_FORMAT(date, '%Y-%m-%d') date, 
		      config.id collectionTypeId, 
		      config.name collectionType, 
		      'transaction', 
		      transaction_type, 
		      amount 
		    from 
		      transaction 
		      join config on transaction.type_id = config.id 
		    where 
		      date >= :fromDate 
		      and date < :toDate 
		    group by 
		       DATE_FORMAT(date, '%Y-%m-%d'), 
		      config.id
		  ) a 
		order by 
		  a.date
		  ]]>

	</sql-query>

	<!-- Returns all users with paid amount who pledged for given campaign with 
		monthly collection period -->
	<sql-query name="USER_PLEDGE_PAYMENT_STATUS_FOR_MONTHLY_CAMPAIGN">
	<![CDATA[
	select 
		  up.period, 
		  up.user_id 'userId', 
		  ud.firstname 'firstname', 
		  ud.phone 'phone',
		  up.campaign_id 'campaignId', 
		  c.name 'campaignName' , 
		  up.amount 'pledgedAmount', 
		  sum(d.amount) 'paidAmount'
	from 
		  (
		    select 
		      concat(year, '-', month) 'period', 
		      campaign_id, 
		      user_id, 
		      amount 
		    from 
		      dim_month_year, 
		      user_pledge 
		    where 
		      concat(year, '-', month) >= :fromMonthYear 
		      and concat(year, '-', month) <= :toMonthYear
		  ) up 
  	left outer join (
		    select 
		      campaign_id, 
		      user_id, 
		      date, 
		      amount 
		    from 
		      donation 
		    where 
		      date >= :fromDate and date< :toDate
  		) d 
  	on up.campaign_id = d.campaign_id 
  	and up.period = date_format(d.date,'%Y-%m')
  	and up.user_id = d.user_id 
  	join 
  		user_details ud 
  	on up.user_id = ud.id 
  	join 
  		campaign c 
  	on up.campaign_id = c.id 
  		and up.campaign_id = :campaignId
	group by 
	  up.period, 
	  up.user_id, 
	  up.campaign_id, 
	  up.amount 
	order by 
	  up.period, 
	  up.campaign_id, 
	  up.user_id
	]]>

	</sql-query>

	<sql-query name="USER_PLEDGE_PAYMENT_STATUS_FOR_YEARLY_CAMPAIGN">
	<![CDATA[
	select 
		  up.period, 
		  up.user_id 'userId', 
		  ud.firstname 'firstname', 
		  ud.phone 'phone',
		  up.campaign_id 'campaignId', 
		  c.name 'campaignName' , 
		  up.amount 'pledgedAmount', 
		  sum(d.amount) 'paidAmount'
	from 
		  (
		    select 
		      distinct(year) 'period', 
		      campaign_id, 
		      user_id, 
		      amount 
		    from 
		      dim_month_year, 
		      user_pledge 
		    where 
		      concat(year) >= :fromYear 
		      and concat(year) <= :toYear
		  ) up 
  	left outer join (
		    select 
		      campaign_id, 
		      user_id, 
		      date, 
		      amount 
		    from 
		      donation 
		    where 
		      date >= :fromDate and date< :toDate
  		) d 
  	on up.campaign_id = d.campaign_id 
  	and up.period = date_format(d.date,'%Y')
  	and up.user_id = d.user_id 
  	join 
  		user_details ud 
  	on up.user_id = ud.id 
  	join 
  		campaign c 
  	on up.campaign_id = c.id 
  		and up.campaign_id = :campaignId
	group by 
	  up.period, 
	  up.user_id, 
	  up.campaign_id, 
	  up.amount 
	order by 
	  up.period, 
	  up.campaign_id, 
	  up.user_id
	]]>

	</sql-query>

	<sql-query name="USER_PLEDGE_PAYMENT_STATUS_FOR_ONCE_CAMPAIGN">
	<![CDATA[
	select 
		  up.period, 
		  up.user_id 'userId', 
		  ud.firstname 'firstname', 
		  ud.phone 'phone',
		  up.campaign_id 'campaignId', 
		  c.name 'campaignName' , 
		  up.amount 'pledgedAmount', 
		  sum(d.amount) 'paidAmount'
	from 
		  (
		    select 
		      concat(year) 'period', 
		      campaign_id, 
		      user_id, 
		      amount 
		    from 
		      dim_month_year, 
		      user_pledge 
		    where 
		      concat(year) >= :fromMonthYear 
		      and concat(year) <= :toMonthYear
		  ) up 
  	left outer join (
		    select 
		      campaign_id, 
		      user_id, 
		      date, 
		      amount 
		    from 
		      donation 
		    where 
		      date >= :fromDate and date< :toDate
  		) d 
  	on up.campaign_id = d.campaign_id 
  	and up.period = date_format(d.date,'%Y')
  	and up.user_id = d.user_id 
  	join 
  		user_details ud 
  	on up.user_id = ud.id 
  	join 
  		campaign c 
  	on up.campaign_id = c.id 
  		and up.campaign_id = :campaignId
	group by 
	  up.period, 
	  up.user_id, 
	  up.campaign_id, 
	  up.amount 
	order by 
	  up.period, 
	  up.campaign_id, 
	  up.user_id
	]]>

	</sql-query>
</hibernate-mapping>